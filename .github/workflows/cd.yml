# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Wpf Continuous Delivery

on:
  workflow_dispatch:
  push:
    branches:
      - 'v**'

jobs:

  build:

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: TubeLoadr.sln                              # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Vdproj_Project_Directory: TubeLoadrSetup                  # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Vdproj_Project_Path: TubeLoadrSetup.vdproj                # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.
      App_Packages_Directory: Release
      App_Packages_Archive: TubeLoadrSetup.zip

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        lfs: 'false'

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Use Nerdbank.GitVersioning to set version variables: https://github.com/AArnott/nbgv
    - name: Use Nerdbank.GitVersioning to set version variables
      uses: dotnet/nbgv@master
      id: nbgv

    - name: DisableOutOfProc Fix
      run: |
        function Invoke-DisableOutOfProcBuild {
          param ();
          $visualStudioWherePath = ('{0}/Microsoft Visual Studio/Installer/vswhere.exe' -f ${Env:ProgramFiles(x86)});
          $visualStudioInstallationPath = & $visualStudioWherePath -latest -products 'Microsoft.VisualStudio.Product.Enterprise' -property 'installationPath';
          $currentWorkingDirectory = ('{0}/Common7/IDE/CommonExtensions/Microsoft/VSI/DisableOutOfProcBuild' -f $visualStudioInstallationPath);
          
          Set-Location -Path $currentWorkingDirectory;
          
          $disableOutOfProcBuildPath = ('{0}/DisableOutOfProcBuild.exe' -f $currentWorkingDirectory);
          
          & $disableOutOfProcBuildPath;
          
          return;
        }
        Invoke-DisableOutOfProcBuild
    
    - name: Install ffmpeg
      run: |
        if (Test-Path "${{github.workspace}}\TubeLoadr\Downloadtools") {}
        else {
          mkdir ${{github.workspace}}\TubeLoadr\Downloadtools
        }
        curl "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip" -L -O ${{github.workspace}}\ffmpeg-release-essentials.zip
        7z e ${{github.workspace}}\ffmpeg-release-essentials.zip -o${{github.workspace}}\ffmpeg-release-essentials
        move ${{github.workspace}}\ffmpeg-release-essentials\*.exe ${{github.workspace}}\TubeLoadr\Downloadtools

    - name: Close Windows Terminal
      run: |
        Get-Process WindowsTerminal -ErrorAction SilentlyContinue | Stop-Process -Force
        Write-Host "Closed any running Windows Terminal processes."
    
    - name: Install winget
      uses: Cyberboss/install-winget@v1

    - name: install yt-dlp
      run: winget install yt-dlp --location ${{github.workspace}}\TubeLoadr\Downloadtools --accept-package-agreements --accept-source-agreements

    #- name: install ffmpeg
    #  run: winget install "FFmpeg (Essentials Build)" --location ${{github.workspace}}\TubeLoadr\Downloadtools --accept-package-agreements --accept-source-agreements
      
    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration /p:Platform=$env:Platform
      env:
        Configuration: Release
        Platform: x64

    - name: Clean build environment
      run: dotnet clean --configuration Release

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Setup VS Dev Environment
      uses: seanmiddleditch/gha-setup-vsdevenv@v4
    - name: Build installer
      run: devenv.com ${{github.workspace}}\$env:Vdproj_Project_Directory\$env:Vdproj_Project_Path /build "Release|x64"

    # Archive the package
    - name: Create archive
      run: Compress-Archive -Path $env:Vdproj_Project_Directory\$env:App_Packages_Directory\* -DestinationPath $env:Vdproj_Project_Directory\$env:App_Packages_Directory\$env:App_Packages_Archive

    # Create the release:  https://github.com/actions/create-release
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: v${{ steps.nbgv.outputs.simpleVersion }}
        release_name:  TubeLoadrSetup win-64
        draft: false
        prerelease: false

    # Upload release asset:   https://github.com/actions/upload-release-asset
    - name: Update release asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}  # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ${{ env.Vdproj_Project_Directory }}\${{ env.App_Packages_Directory }}\${{ env.App_Packages_Archive }}
        asset_name: ${{ env.App_Packages_Archive }}
        asset_content_type: application/zip
